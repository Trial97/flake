#! /usr/bin/env bash

set -ex

ISO_PATH=$(ls ./*.iso | head -n 1)
ISO_PATH=$(realpath "${ISO_PATH}")

# Create an empty ext4 filesystem image. A filesystem image does not
# contain a partition table but just a filesystem.
createEmptyFilesystemImage() {
    local name=$1
    local size=$2
    local temp=$(mktemp)
    qemu-img create -f raw "$temp" "$size"
    mkfs.ext4 -L nixos "$temp"
    qemu-img convert -f raw -O qcow2 "$temp" "$name"
    rm "$temp"
}

NIX_DISK_IMAGE=$(readlink -f "${NIX_DISK_IMAGE:-/mnt/Clockwork/VirtualBoxes/clockwork.qcow2}") || test -z "$NIX_DISK_IMAGE"
NIX_DISK_IMAGE=$(readlink -f "${NIX_DISK_IMAGE:-./clockwork.qcow2}") || test -z "$NIX_DISK_IMAGE"

if test -n "$NIX_DISK_IMAGE" && ! test -e "$NIX_DISK_IMAGE"; then
    echo "Disk image do not exist, creating the virtualisation disk image..."

    createEmptyFilesystemImage "$NIX_DISK_IMAGE" "52240M"

    echo "Virtualisation disk image created."
fi

# Create a directory for storing temporary data of the running VM.
if [ -z "$TMPDIR" ] || [ -z "$USE_TMPDIR" ]; then
    TMPDIR=$(mktemp -d nix-vm.XXXXXXXXXX --tmpdir)
fi

# Create a directory for exchanging data with the VM.
mkdir -p "$TMPDIR/xchg"

cd "$TMPDIR"

# Start QEMU.
exec qemu-system-x86_64 -machine accel=kvm:tcg -cpu max \
    -name clockwork \
    -m 2048 \
    -smp 2 \
    -device virtio-rng-pci \
    -net nic,netdev=user.0,model=virtio -netdev user,id=user.0,"$QEMU_NET_OPTS" \
    -virtfs local,path=/home/trial/Projects/nix2/,security_model=mapped-xattr,mount_tag=my-share \
    -virtfs local,path="${SHARED_DIR:-$TMPDIR/xchg}",security_model=none,mount_tag=shared \
    -virtfs local,path="$TMPDIR"/xchg,security_model=none,mount_tag=xchg \
    -cdrom "$ISO_PATH" \
    -drive cache=writeback,file="$NIX_DISK_IMAGE",id=drive1,if=none,index=1,werror=report -device virtio-blk-pci,bootindex=1,drive=drive1,serial=root \
    -device virtio-keyboard \
    -usb \
    -device usb-tablet,bus=usb-bus.0 \
    $QEMU_OPTS \
    "$@"
